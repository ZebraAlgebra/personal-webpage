<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - package</title>
    <subtitle>Personal Webpage</subtitle>
    <link rel="self" type="application/atom+xml" href="https://zebraalgebra-personal-page.netlify.app/tags/package/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://zebraalgebra-personal-page.netlify.app/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-12-03T00:00:00+00:00</updated>
    <id>https://zebraalgebra-personal-page.netlify.app/tags/package/atom.xml</id>
    <entry xml:lang="en">
        <title>&lt;üêç python&gt; Packaging and Publishing Python Projects</title>
        <published>2023-12-03T00:00:00+00:00</published>
        <updated>2023-12-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zebraalgebra-personal-page.netlify.app/blog/03-003/"/>
        <id>https://zebraalgebra-personal-page.netlify.app/blog/03-003/</id>
        
        <content type="html" xml:base="https://zebraalgebra-personal-page.netlify.app/blog/03-003/">&lt;p&gt;In this post, I will be writing about the steps of publishing a package, as well as what resources helped me the most.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: Since my package is a relatively simple and small one, this tutorial does not present the best practices on the process of packaging, publishing a project, but rather, a basic way of doing so.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;&#x2F;h2&gt;
&lt;p&gt;I recently worked on a school project in the course &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;omscs.gatech.edu&#x2F;isye-6644-simulation-and-modeling-engineering-and-science&quot;&gt;ISYE6644 Simulation&lt;&#x2F;a&gt; and wrote some Python code for it.&lt;&#x2F;p&gt;
&lt;p&gt;Throughout the process I was thinking: well, maybe if I can build, publish this as a Python package, and that people can run &lt;code&gt;pip install&lt;&#x2F;code&gt; to install it, wouldn‚Äôt that be pretty fun?&lt;&#x2F;p&gt;
&lt;p&gt;After going through some tutorials and going through some documentations (which is not an entirely trivial process), I finally published the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;test.pypi.org&#x2F;project&#x2F;flusim&#x2F;&quot;&gt;package&lt;&#x2F;a&gt; on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;test.pypi.org&#x2F;&quot;&gt;testpypi&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;flusim.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The amazing tutorial that helped me the most is the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=5KEObONUkik&amp;amp;t=936s&amp;amp;pp=ygUZYXJqYW5jb2RlcyBweXRob24gcGFja2FnZQ%3D%3D&quot;&gt;Youtube video by ArjanCodes&lt;&#x2F;a&gt;, and I highly recommend checking it out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overview-of-the-process&quot;&gt;Overview of the Process&lt;&#x2F;h2&gt;
&lt;p&gt;The process of building a project is roughly as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You need to have the source codes, and a &lt;code&gt;setup.py&lt;&#x2F;code&gt; file ready.&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;setuptools&lt;&#x2F;code&gt; on &lt;code&gt;setup.py&lt;&#x2F;code&gt; to build a distribution file.&lt;&#x2F;li&gt;
&lt;li&gt;Check the generated distribution files using &lt;code&gt;twine&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Upload the package to &lt;code&gt;pypi&lt;&#x2F;code&gt; or &lt;code&gt;testpypi&lt;&#x2F;code&gt; - also using &lt;code&gt;twine&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Pretty straightforward, isn‚Äôt it?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-syntaxes&quot;&gt;The Syntaxes&lt;&#x2F;h2&gt;
&lt;p&gt;You can check out my project directory structure at my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ZebraAlgebra&#x2F;flusim&quot;&gt;Github repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order for these commands in the following sections to work, you will first need to &lt;code&gt;pip install&lt;&#x2F;code&gt; the packages &lt;code&gt;twine, wheel, setuptools&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;setup-and-build&quot;&gt;Setup and Build&lt;&#x2F;h3&gt;
&lt;p&gt;My &lt;code&gt;setup.py&lt;&#x2F;code&gt; file is configured as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;setuptools &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;setup, find_packages
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;app&#x2F;README.md&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;r&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;    long_description &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;f.read()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setup(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;flusim&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.0.1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Simulation, computation, visualization of some statistics for a small-scale flu-spread problem.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    long_description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;long_description,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    long_description_content_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;text&#x2F;markdown&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    package_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;app&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Samuel Wang&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    author_email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;swang3068@gatech.edu&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;ZebraAlgebra&#x2F;flu-   sim&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    license&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;MIT&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    packages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;find_packages(where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;app&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that, run the following in terminal (my terminal is git bash):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;python setup.py bdist_wheel sdist
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which will build:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;build&lt;&#x2F;code&gt; folder containing a copy of your source codes.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;code&gt;dist&lt;&#x2F;code&gt; folder with a &lt;code&gt;.whl&lt;&#x2F;code&gt; (wheel) file, a &lt;code&gt;.tar.gz&lt;&#x2F;code&gt; file.&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;code&gt;.egg-info&lt;&#x2F;code&gt; containing some other metadata (in your source code folder).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;check&quot;&gt;Check&lt;&#x2F;h3&gt;
&lt;p&gt;Now one can use &lt;code&gt;twine&lt;&#x2F;code&gt; to check if things are alright via:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;twine check dist&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and it will complain if some infos are not present; here, recall that &lt;code&gt;dist&lt;&#x2F;code&gt; is the folder built by &lt;code&gt;setuptools&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;publishing&quot;&gt;Publishing&lt;&#x2F;h3&gt;
&lt;p&gt;To publish, first register an account on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;&quot;&gt;PyPI&lt;&#x2F;a&gt;, or the associated testing site &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;test.pypi.org&#x2F;&quot;&gt;test PyPI&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;ArjanCodes recommends &lt;strong&gt;first upload it on test PyPI&lt;&#x2F;strong&gt;, since PyPI is the official index. Also, since recently PyPI closed its registration (due to spam registrations), one can only create accounts on test PyPI.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To publish on PyPI, run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;twine upload dist&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and enter the credentials. To publish on test PyPI, modify the command to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;twine upload -r testpypi dist&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Additional details: One might need to enable 2FA on test PyPI and generate tokens to succesfully publish a package, but the test PyPI site will walk you through these.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>&lt;üêç python&gt; Python package management</title>
        <published>2023-02-08T00:00:00+00:00</published>
        <updated>2023-02-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zebraalgebra-personal-page.netlify.app/blog/03-004/"/>
        <id>https://zebraalgebra-personal-page.netlify.app/blog/03-004/</id>
        
        <content type="html" xml:base="https://zebraalgebra-personal-page.netlify.app/blog/03-004/">&lt;p&gt;In this post, I will talk about the Python tools I use for managing Python packages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h2&gt;
&lt;p&gt;We often install packages via &lt;code&gt;pip&lt;&#x2F;code&gt; or &lt;code&gt;pip3&lt;&#x2F;code&gt;. For example, we can install numpy via:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pip install numpy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most of the time, this command will install things globally, so all Python files can freely import this package, which can be convenient.&lt;&#x2F;p&gt;
&lt;p&gt;However, some of the issues I encountered with this approach:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Extra steps are needed to directly invoke things like &lt;code&gt;black&lt;&#x2F;code&gt; formatter or things like &lt;code&gt;cowsay&lt;&#x2F;code&gt; from the command line, if I needed, if I don‚Äôt want to type &lt;code&gt;python -m black some_python_filename.py&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Sometimes I need to use older versions of packages for homeworks. Tweaking package versions on the global scope doesn‚Äôt feel right with me - what if I forgot to switch it back?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The solution I found for my first problem was to use &lt;code&gt;pipx&lt;&#x2F;code&gt;, and the solution to my second one is to use &lt;strong&gt;virtual environments&lt;&#x2F;strong&gt; (specifically, I used &lt;code&gt;virtualenv&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pipx&quot;&gt;&lt;code&gt;pipx&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;pipx&lt;&#x2F;code&gt; is just like &lt;code&gt;pip&lt;&#x2F;code&gt;, with other package managing functionalities.&lt;&#x2F;p&gt;
&lt;p&gt;To use it, install &lt;code&gt;pipx&lt;&#x2F;code&gt;, and do &lt;code&gt;pipx install packagename&lt;&#x2F;code&gt; to install packages. The command &lt;code&gt;pipx ensurepath&lt;&#x2F;code&gt; will ensure the &lt;code&gt;pipx&lt;&#x2F;code&gt; binary directories are added to &lt;code&gt;PATH&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now I can happily use &lt;code&gt;cowsay&lt;&#x2F;code&gt; (the &lt;code&gt;-c&lt;&#x2F;code&gt; flag indicates characters to do the cowsay, and the &lt;code&gt;-t&lt;&#x2F;code&gt; flag indicates what text to say):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cowsay -c tux -t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;penguinsay&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;  __________
&lt;&#x2F;span&gt;&lt;span&gt;| penguinsay |
&lt;&#x2F;span&gt;&lt;span&gt;  ==========
&lt;&#x2F;span&gt;&lt;span&gt;               \
&lt;&#x2F;span&gt;&lt;span&gt;                \
&lt;&#x2F;span&gt;&lt;span&gt;                 \
&lt;&#x2F;span&gt;&lt;span&gt;                  .--.
&lt;&#x2F;span&gt;&lt;span&gt;                 |o_o |
&lt;&#x2F;span&gt;&lt;span&gt;                 |:_&#x2F; |
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F;   \ \
&lt;&#x2F;span&gt;&lt;span&gt;               (|     | )
&lt;&#x2F;span&gt;&lt;span&gt;              &#x2F;&amp;#39;\_   _&#x2F;`\
&lt;&#x2F;span&gt;&lt;span&gt;              \___)=(___&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Other useful commands&lt;&#x2F;em&gt;: One can use &lt;code&gt;pipx list&lt;&#x2F;code&gt; to list all packages, and use &lt;code&gt;pipx uninstall packagename&lt;&#x2F;code&gt; to uninstall things.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;virtualenv&quot;&gt;&lt;code&gt;virtualenv&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In a nutshell, virtual environments allows users to install packages and make it available only in the specified directory.&lt;&#x2F;p&gt;
&lt;p&gt;There are many ways to create and manage virtual environments. I like to use &lt;code&gt;virtualenv&lt;&#x2F;code&gt;. Other built-in Python tools like &lt;code&gt;venv&lt;&#x2F;code&gt; is also commonly-used. Some people also use &lt;code&gt;anaconda&lt;&#x2F;code&gt; to manage virtual environments.&lt;&#x2F;p&gt;
&lt;p&gt;The workflow are roughly as follows.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Think of where you want to start a virtual environment.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you already have an existing one, &lt;code&gt;cd&lt;&#x2F;code&gt; into that directory, run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;virtualenv .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you want to create a new one with name &lt;code&gt;myenv&lt;&#x2F;code&gt;, &lt;code&gt;cd&lt;&#x2F;code&gt; into the parent directory of your desired directory for &lt;code&gt;myenv&lt;&#x2F;code&gt;, and run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;virtualenv myenv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Now if you go inside your directory, you will see several new directories are created in there. It would look something like this:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ .gitignore
&lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ bin
&lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ lib
&lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ pyvenv.cfg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;To activate the virtual environment, depending on which shell you are using:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;bash&lt;&#x2F;code&gt;, &lt;code&gt;zsh&lt;&#x2F;code&gt;, run:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; .&#x2F;bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;If you are using other shells - such as Window‚Äôs command line, or Powershell, or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fishshell.com&#x2F;&quot;&gt;fish&lt;&#x2F;a&gt;(this is the one I use), or nu, than you‚Äôll need to change &lt;code&gt;activate&lt;&#x2F;code&gt; to &lt;code&gt;activate.bat&lt;&#x2F;code&gt; (command line), or &lt;code&gt;activate.ps1&lt;&#x2F;code&gt; (for Powershell), or &lt;code&gt;activate.fish&lt;&#x2F;code&gt; (for fish shell), or &lt;code&gt;activate.nu&lt;&#x2F;code&gt; (for nu shells). One can look at which activate files are present in the new &lt;code&gt;bin&lt;&#x2F;code&gt; directory to determine which script to use.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;
&lt;p&gt;After that, the appearance of your shell prompt should change, indicating that the virtual environment has been activated. After that, you may install all the Python packages you needed - these installations will only modify the files inside your current directory.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;To deactivate, simply type &lt;code&gt;deactivate&lt;&#x2F;code&gt; in your shell.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
</feed>
