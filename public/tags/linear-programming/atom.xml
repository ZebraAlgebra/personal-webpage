<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - linear programming</title>
    <subtitle>Personal Webpage</subtitle>
    <link href="https://zebraalgebra-personal-page.netlify.app/tags/linear-programming/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://zebraalgebra-personal-page.netlify.app/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-11-09T00:00:00+00:00</updated>
    <id>https://zebraalgebra-personal-page.netlify.app/tags/linear-programming/atom.xml</id>
    <entry xml:lang="en">
        <title>&lt;üêç python&gt; Joy with PuLP</title>
        <published>2023-11-09T00:00:00+00:00</published>
        <updated>2023-11-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://zebraalgebra-personal-page.netlify.app/blog/03-001/" type="text/html"/>
        <id>https://zebraalgebra-personal-page.netlify.app/blog/03-001/</id>
        
        <content type="html">&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;pulp.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;PuLP&lt;&#x2F;code&gt; is a powerful Python module for solving linear programming problems.&lt;&#x2F;p&gt;
&lt;p&gt;I used this tool recently in one of the homeworks of &lt;code&gt;ISYE 6501&lt;&#x2F;code&gt; - &lt;em&gt;Introduction to Analytics Modeling&lt;&#x2F;em&gt;, where we were asked to solve &lt;em&gt;the diet problem&lt;&#x2F;em&gt; - similar to the one given in this &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;neos-guide.org&#x2F;case-studies&#x2F;om&#x2F;the-diet-problem&#x2F;&quot;&gt;link&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Pulp&lt;&#x2F;code&gt; is easy and intuitive to use, with very clear documentation. The purpose of this post is to give a very brief overview on how to work with this module.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basics-of-linear-program&quot;&gt;Basics of Linear Program&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;anatomy-of-a-linear-program&quot;&gt;Anatomy of a Linear Program&lt;&#x2F;h3&gt;
&lt;p&gt;A linear program mainly has the following three parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;An objective function&lt;&#x2F;strong&gt; - a linear expression which we want to either maximize or minimize&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Some constraints&lt;&#x2F;strong&gt; - expressed as equalities or inequalities of linear expressions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;&#x2F;strong&gt; - sometimes with additional bounds or restrictions (such as integrality).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;a-basic-example&quot;&gt;A Basic Example&lt;&#x2F;h3&gt;
&lt;p&gt;Let us use an artificial basic example as an aid for illustration.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Johnny has &lt;code&gt;10&lt;&#x2F;code&gt; dollars, and wants to spend them on Oreo and Reese‚Äôs Puffs. Each unit of Oreo and Reese‚Äôs Puffs cost &lt;code&gt;3&lt;&#x2F;code&gt;, &lt;code&gt;4&lt;&#x2F;code&gt; dollars.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Johnny wants to maximize happiness, which he associated to each unit of Oreo or Reese‚Äôs Puffs numerical constants &lt;code&gt;11&lt;&#x2F;code&gt;, &lt;code&gt;12&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Johnny can only buy integral unit amounts of these things.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If we let &lt;code&gt;x&lt;&#x2F;code&gt; to be the variable for Oreo, and &lt;code&gt;y&lt;&#x2F;code&gt; the variable for Reese‚Äôs Puffs, then:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The objective is to maximize &lt;code&gt;11x + 12y&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The constraint is &lt;code&gt;3x + 4y &amp;lt;= 10&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The variable restrictions are &lt;code&gt;x, y&lt;&#x2F;code&gt; has to be nonnegative integers.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;some-working-knowledge&quot;&gt;Some Working Knowledge&lt;&#x2F;h3&gt;
&lt;p&gt;For the case where variables needn‚Äôt be integers or binaries, there are several good solvers, and most LP-solvers nowadays can solve such systems in a flash even when such system has an absurd amount of variables and constraints.&lt;&#x2F;p&gt;
&lt;p&gt;If we require the variables to be integers or binaries, then the problem is significantly harder to solve. For example, the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vertex_cover#Computational_problem&quot;&gt;minimum vertex covering problem&lt;&#x2F;a&gt; in graph theory - which is NP complete - can be written as an integral linear programming problem.&lt;&#x2F;p&gt;
&lt;p&gt;I highly recommend the short book &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;link.springer.com&#x2F;book&#x2F;10.1007&#x2F;978-3-540-30717-4&quot;&gt;Understanding and Using Linear Programming&lt;&#x2F;a&gt; by Ji≈ô√≠ Matou≈°ek , Bernd G√§rtner for looking into the maths and applications of lieanr programming.&lt;&#x2F;p&gt;
&lt;p&gt;Now let us look at how to transpose this into a &lt;code&gt;PuLP&lt;&#x2F;code&gt; program.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pulp-s-api-design&quot;&gt;&lt;code&gt;PuLP&lt;&#x2F;code&gt;‚Äôs API design&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;some-pulp-classes&quot;&gt;Some &lt;code&gt;PuLP&lt;&#x2F;code&gt; classes&lt;&#x2F;h3&gt;
&lt;p&gt;Corresponding to the mathematical constituents of a linear program, &lt;code&gt;PuLP&lt;&#x2F;code&gt; has the following useful counterparts:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Class&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;LpVariable&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;A symbolic variable. Can be declared with a name, lower&#x2F;upper bounds, or having type integer or binary.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;LpAffineExpression&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;A numeric combination of &lt;code&gt;LpVariable&lt;&#x2F;code&gt;s. It can be declared via a list of &lt;code&gt;[(LpVariable, coeff)]&lt;&#x2F;code&gt; pairs.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;LpConstraint&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;An &lt;code&gt;LpAffineExpression&lt;&#x2F;code&gt; with some additional infos - such as the inequality type, name of constraint.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;LpProblem&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;An environment for collecting the objective functions, constraints, variable infos, to minimize or maximize, as well as executing the linar programming solvers.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;solving-the-problem-with-pulp&quot;&gt;Solving the problem with &lt;code&gt;PuLP&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Some of the details of syntaxes are clear in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;coin-or.github.io&#x2F;pulp&#x2F;technical&#x2F;pulp.html&quot;&gt;internal documentations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pulp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Declare Variables
&lt;&#x2F;span&gt;&lt;span&gt;var_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LpVariable(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Oreo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, lowBound&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Integer&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;var_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LpVariable(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Reese&amp;#39;s Puffs&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, lowBound&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Integer&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Declare Expressions
&lt;&#x2F;span&gt;&lt;span&gt;expr_obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LpAffineExpression([(var_x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), (var_y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)])
&lt;&#x2F;span&gt;&lt;span&gt;expr_constraint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LpAffineExpression([(var_x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), (var_y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Declare Constraints
&lt;&#x2F;span&gt;&lt;span&gt;constraint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LpConstraint(expr_constraint, sense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, rhs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Declare Problem and Add Details to it
&lt;&#x2F;span&gt;&lt;span&gt;problem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LpProblem(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Johnny&amp;#39;s Scheme&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, sense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;problem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;expr_obj
&lt;&#x2F;span&gt;&lt;span&gt;problem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;constraint
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Call Solve
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;problem.solve()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Status Code: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{problem.status}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# 1 = success
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Result:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;({v.name: v.varValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;problem.variables()})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# output:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Status Code: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Result:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# {&amp;#39;Oreo&amp;#39;: 2.0, &amp;quot;Reese&amp;#39;s_Puffs&amp;quot;: 1.0}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now Johnny‚Äôs happy üòä.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
